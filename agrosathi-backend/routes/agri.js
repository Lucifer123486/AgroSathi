require("dotenv").config();
const express = require("express");
const router = express.Router();
const multer = require("multer");
const upload = multer({ storage: multer.memoryStorage() });
const axios = require("axios");
const FormData = require("form-data");

const twilio = require("twilio");
const client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);

// ‚úÖ WhatsApp sender
const sendWhatsApp = async (to, message) => {
  try {
    const trimmed = message.length > 1597 ? message.slice(0, 1597) + "..." : message;
    const response = await client.messages.create({
      body: trimmed,
      from: process.env.TWILIO_WHATSAPP_NUMBER,
      to: `whatsapp:${to}`,
    });
    console.log("‚úÖ WhatsApp sent:", response.sid);
  } catch (error) {
    console.error("‚ùå WhatsApp error:", error.message);
  }
};

// ‚úÖ AI Advice Generator
const generateAIAdvice = async (prompt) => {
  try {
    const res = await axios.post(
      "https://openrouter.ai/api/v1/chat/completions",
      {
        model: "openai/gpt-3.5-turbo",
        messages: [
          { role: "system", content: "You are AgroSathi, a helpful Indian agricultural assistant." },
          { role: "user", content: prompt },
        ],
        max_tokens: 400,
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );
    return res.data.choices[0].message.content;
  } catch (err) {
    console.error("‚ùå OpenRouter AI Error:", err.message);
    return "‚ö†Ô∏è Could not generate advice. Please try again.";
  }
};

// üé§ Voice Query Route
router.post("/voice", async (req, res) => {
  const { query, phone, language = "en" } = req.body;

  if (!query) return res.status(400).json({ error: "Query missing." });

  let prompt = `Farmer said: "${query}". Give complete farming advice including causes, symptoms, and treatment in simple rural Indian farmer-friendly language.`;

  if (language === "hi") {
    prompt = `‡§ï‡§ø‡§∏‡§æ‡§® ‡§®‡•á ‡§ï‡§π‡§æ: "${query}"‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§á‡§∏ ‡§™‡§∞ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§ï‡•É‡§∑‡§ø ‡§∏‡§≤‡§æ‡§π ‡§¶‡•á‡§Ç ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§ï‡§æ‡§∞‡§£, ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§î‡§∞ ‡§â‡§™‡§ö‡§æ‡§∞ ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•ã‡§Ç‡•§ ‡§∏‡§∞‡§≤ ‡§î‡§∞ ‡§â‡§™‡§Ø‡•ã‡§ó‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§Ç‡•§`;
  } else if (language === "mr") {
    prompt = `‡§∂‡•á‡§§‡§ï‡§±‡•ç‡§Ø‡§æ‡§®‡•á ‡§∏‡§æ‡§Ç‡§ó‡§ø‡§§‡§≤‡•á: "${query}"‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡§∞‡§æ‡§†‡•Ä‡§§ ‡§∏‡§µ‡§ø‡§∏‡•ç‡§§‡§∞ ‡§ï‡•É‡§∑‡•Ä ‡§∏‡§≤‡•ç‡§≤‡§æ ‡§¶‡•ç‡§Ø‡§æ ‚Äì ‡§ï‡§æ‡§∞‡§£‡•á, ‡§≤‡§ï‡•ç‡§∑‡§£‡•á ‡§Ü‡§£‡§ø ‡§â‡§™‡§ö‡§æ‡§∞ ‡§Ø‡§æ‡§Ç‡§∏‡§π. ‡§∏‡•ã‡§™‡•Ä ‡§Ü‡§£‡§ø ‡§â‡§™‡§Ø‡•ã‡§ó‡•Ä ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§µ‡§æ‡§™‡§∞‡§æ.`;
  }

  try {
    const aiReply = await generateAIAdvice(prompt);
    const fullMessage = `üß† AgroSathi Suggestion:\n${aiReply}`;

    if (phone) await sendWhatsApp(phone, fullMessage);

    res.json({ reply: aiReply });
  } catch (err) {
    console.error("‚ùå Voice Route Error:", err.message);
    res.status(500).json({ error: "AI processing failed." });
  }
});

// üì∏ Image Query Route (Real model + OpenRouter)
router.post("/image", upload.single("image"), async (req, res) => {
  const { phone, language = "en" } = req.body;
  const imageBuffer = req.file?.buffer;

  if (!imageBuffer) return res.status(400).json({ error: "No image provided." });

  let result = {};

  try {
    const form = new FormData();
    form.append("image", imageBuffer, { filename: "plant.jpg" });

    const flaskRes = await axios.post("http://127.0.0.1:5000/predict", form, {
      headers: form.getHeaders(),
    });
    console.log("üîç Flask Result:", flaskRes.data); // ADD THIS LINE


    const label_map = {
  0: "Apple___Apple_scab",
  1: "Apple___Black_rot",
  2: "Apple___Cedar_apple_rust",
  3: "Apple___healthy",
  4: "Blueberry___healthy",
  5: "Cherry_(including_sour)___Powdery_mildew",
  6: "Cherry_(including_sour)___healthy",
  7: "Corn_(maize)___Cercospora_leaf_spot Gray_leaf_spot",
  8: "Corn_(maize)___Common_rust_",
  9: "Corn_(maize)___Northern_Leaf_Blight",
  10: "Corn_(maize)___healthy",
  11: "Grape___Black_rot",
  12: "Grape___Esca_(Black_Measles)",
  13: "Grape___Leaf_blight_(Isariopsis_Leaf_Spot)",
  14: "Grape___healthy",
  15: "Orange___Haunglongbing_(Citrus_greening)",
  16: "Peach___Bacterial_spot",
  17: "Peach___healthy",
  18: "Pepper,_bell___Bacterial_spot",
  19: "Pepper,_bell___healthy",
  20: "Potato___Early_blight",
  21: "Potato___Late_blight",
  22: "Potato___healthy",
  23: "Raspberry___healthy",
  24: "Soybean___healthy",
  25: "Squash___Powdery_mildew",
  26: "Strawberry___Leaf_scorch",
  27: "Strawberry___healthy",
  28: "Tomato___Bacterial_spot",
  29: "Tomato___Early_blight",
  30: "Tomato___Late_blight",
  31: "Tomato___Leaf_Mold",
  32: "Tomato___Septoria_leaf_spot",
  33: "Tomato___Spider_mites Two-spotted_spider_mite",
  34: "Tomato___Target_Spot",
  35: "Tomato___Tomato_Yellow_Leaf_Curl_Virus",
  36: "Tomato___Tomato_mosaic_virus",
  37: "Tomato___healthy"
};


    result.disease = flaskRes.data.class_name || "Unknown";
result.confidence = flaskRes.data.confidence;

  } catch (err) {
    console.error("‚ùå ML Prediction Error:", err.message);
    return res.status(500).json({ error: "Image prediction failed." });
  }

  // üåê Prompt based on language
  let prompt = `Explain the plant disease "${result.disease}" using:\n1. Disease Name\n2. Symptoms\n3. Causes\n4. Treatment\nUse bullet points and easy English.`;

  if (language === "hi") {
    prompt = `‡§Ü‡§™ AgroSathi ‡§π‡•à‡§Ç‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ "${result.disease}" ‡§∞‡•ã‡§ó ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§Ç:\n1. ‡§∞‡•ã‡§ó ‡§ï‡§æ ‡§®‡§æ‡§Æ\n2. ‡§≤‡§ï‡•ç‡§∑‡§£\n3. ‡§ï‡§æ‡§∞‡§£\n4. ‡§â‡§™‡§ö‡§æ‡§∞\n‡§∏‡§∞‡§≤ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§î‡§∞ ‡§¨‡§ø‡§Ç‡§¶‡•Å‡§µ‡§æ‡§∞ ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§Ç‡•§`;
  } else if (language === "mr") {
    prompt = `‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä AgroSathi ‡§Ü‡§π‡§æ‡§§. "${result.disease}" ‡§Ø‡§æ ‡§∞‡•ã‡§ó‡§æ‡§ö‡•Ä ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§¶‡•ç‡§Ø‡§æ:\n1. ‡§∞‡•ã‡§ó‡§æ‡§ö‡•á ‡§®‡§æ‡§µ\n2. ‡§≤‡§ï‡•ç‡§∑‡§£‡•á\n3. ‡§ï‡§æ‡§∞‡§£‡•á\n4. ‡§â‡§™‡§ö‡§æ‡§∞\n‡§∏‡•ã‡§™‡•ç‡§Ø‡§æ ‡§Æ‡§∞‡§æ‡§†‡•Ä ‡§≠‡§æ‡§∑‡•á‡§§ ‡§Ü‡§£‡§ø ‡§¨‡•Å‡§≤‡•á‡§ü ‡§™‡•â‡§á‡§Ç‡§ü‡•ç‡§∏‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•ç‡§Ø‡§æ.`;
  }

  try {
    const aiAdvice = await generateAIAdvice(prompt);
    const fullMessage = `üì∏ AgroSathi Diagnosis:\n${aiAdvice}`;
    if (phone) await sendWhatsApp(phone, fullMessage);

    res.json({
      disease: result.disease,
      confidence: result.confidence,
      suggestion: aiAdvice,
    });
  } catch (err) {
    console.error("‚ùå Advice Generation Error:", err.message);
    res.status(500).json({ error: "AI suggestion failed." });
  }
});

module.exports = router;
